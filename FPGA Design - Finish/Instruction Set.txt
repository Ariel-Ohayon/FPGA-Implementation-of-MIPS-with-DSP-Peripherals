R TYPE:
31		  26|25			  21|20		      16|15			  11|10		       6|5						0
-----------------------------------------------------------------------------------------------------
|			|				|				|				|				|						|
|			|				|				|				|				|						|
|	OPCODE	|	rd [5 bit]	|	rs [5 bit]	|	rt [5 bit]	|	x [5 bit]	|	func	[6 bit]		|
|	000000	|				|				|				|				|						|
|			|				|				|				|				|						|
-----------------------------------------------------------------------------------------------------

I TYPE:
31		  26|25			  21|20			  16|15						0
---------------------------------------------------------------------
|			|				|				|						|
|			|				|				|						|
|	OPCODE	|	rd [5 bit]	|	rs [5 bit]	|	imm/addr [16 bit]	|
|			|				|				|						|
|			|				|				|						|
---------------------------------------------------------------------

OPCODE = 6[BIT]

J -TYPE

-------------------------------------------------
|			|				|					|
|			|				|					|
|	OPCODE	|	x [18 bit]	|	addr [8 bit]	|
|			|				|					|
|			|				|					|
-------------------------------------------------

BUS Type

-----------------------------------------------------------------
|			|			|			|							|	
|			|			|			|							|
|	OPCODE	|	rd		|	rs		|	address [16 bit]		|
|	6[bit]	|	5[bit]	|	5[bit]	|							|
|			|			|			|							|
-----------------------------------------------------------------

// ---------------------------------------- Instruction Set ---------------------------------------- \\

	Operation	|	Instruction Type	|	OP-Code	|	Funct	|	Example			|	Example Description
	
	ADD			|		R-Type			|	000000	|	000100	|	ADD	R1,R2,R3	|	R1 <- R2 + R3			 - Sign
	SUB			|		R-Type			|	000000	|	000101	|	SUB R1,R2,R3	|	R1 <- R2 - R3			 - Sign
	MUL			|		R-Type			|	000000	|	000110	|	MUL R1,R2,R3	|	R1 <- R2 * R3 (Multiply) - Sign
	DIV			|		R-Type			|	000000	|	000111	|	DIV	R1,R2,R3	|	R1 <- R2 / R3 (Division) - Sign
	
	AND			|		R-Type			|	000000	|	001000	|	AND R1,R2,R3	|	R1 <- R2 & R3
	OR			|		R-Type			|	000000	|	001001	|	OR	R1,R2,R3	|	R1 <- R2 | R3
	NOR			|		R-Type			|	000000	|	001010	|	NOR R1,R2,R3	|	R1 <- ~ (R2 | R3)
	XOR			|		R-Type			|	000000	|	001011	|	XOR R1,R2,R3	|	R1 <- R2 ^ R3
	
	SLL			|		R-Type			|	000000	|	011000	|	SLL	R1,R2,R3	|	R1 <- R2 << R3 (Shift Logic)
	SRL			|		R-Type			|	000000	|	011001	|	SRL R1,R2,R3	|	R1 <- R2 >> R3 (Shift Logic)
	SLA			|		R-Type			|	000000	|	011010	|	SLA	R1,R2,R3	|	R1 <- R2 << R3 (Shift Arith)
	SRA			|		R-Type			|	000000	|	011011	|	SRA R1,R2,R3	|	R1 <- R2 >> R3 (Shift Arith)
	
	ADDI		|		I-Type			|	000100	|	------	|	ADDI R1,R2,imm	|	R1 <- R2 + imm (16LSB) - Sign
	SUBI		|		I-Type			|	000101	|	------	|	SUBI R1,R2,imm	|	R1 <- R2 - imm (16LSB) - Sign
	MULI		|		I-Type			|	000110	|	------	|	MULI R1,R2,imm	|	R1 <- R2 * imm (16LSB) - Sign
	DIVI		|		I-Type			|	000111	|	------	|	DIVI R1,R2,imm	|	R1 <- R2 / imm (16LSB) - Sign
	
	ADDHI		|		I-Type			|	100100	|	------	|	ADDI R1,R2,imm	|	R1 <- R2 + imm (16MSB) - Sign
	SUBHI		|		I-Type			|	100101	|	------	|	SUBI R1,R2,imm	|	R1 <- R2 - imm (16MSB) - Sign
	MULHI		|		I-Type			|	100110	|	------	|	MULI R1,R2,imm	|	R1 <- R2 * imm (16MSB) - Sign
	DIVHI		|		I-Type			|	100111	|	------	|	DIVI R1,R2,imm	|	R1 <- R2 / imm (16MSB) - Sign
	
	ANDI		|		I-Type			|	001000	|	------	|	ANDI R1,R2,imm	|	R1 <- R2 & imm 	   (16LSB)
	ORI			|		I-Type			|	001001	|	------	|	ORI	 R1,R2,imm	|	R1 <- R2 | imm 	   (16LSB)
	NORI		|		I-Type			|	001010	|	------	|	NORI R1,R2,imm	|	R1 <- ~ (R2 | imm) (16LSB)
	XORI		|		I-Type			|	001011	|	------	|	XORI R1,R2,imm	|	R1 <- R2 ^ imm	   (16LSB)
	
	ANDHI		|		I-Type			|	101000	|	------	|	ANDI R1,R2,imm	|	R1 <- R2 & imm 	   (16MSB)
	ORHI		|		I-Type			|	101001	|	------	|	ORI	 R1,R2,imm	|	R1 <- R2 | imm 	   (16MSB)
	NORHI		|		I-Type			|	101010	|	------	|	NORI R1,R2,imm	|	R1 <- ~ (R2 | imm) (16MSB)
	XORHI		|		I-Type			|	101011	|	------	|	XORI R1,R2,imm	|	R1 <- R2 ^ imm	   (16MSB)
	
	BEQ			|		I-Type			|	001100	|	------	|	BEQ R1,R2,Label	|	branch to Label if (R1 == R2)
	BNE			|		I-Type			|	001101	|	------	|	BNE R1,R2,Label	|	branch to Label if (R1 != R2)
	BGT			|		I-Type			|	001110	|	------	|	BGT R1,R2,Label	|	branch to Label if (R1 > R2)
	BLE			|		I-Type			|	001111	|	------	|	BLE R1,R2,Label	|	branch to Label if (R1 < R2)
	
	LDW			|		I-Type			|	000001	|	------	|	LDW R1,off(R2)	|	R1 <- Data_MEM[R2+off] (Load Word)
	STW			|		I-Type			|	000010	|	------	|	STW R1,off(R2)	|	Data_MEM[R2+off] <- R1 (Store Word)
	
	JMP			|		J-Type			|	111111	|	------	|	JMP Label 		|	PC disconnected from the Adder
	CALL		|		J-Type			|	111110	|	------	|	CALL Label		|
	RET			|		J-Type			|	111101	|	------	|	RET				|
	
	PERBUSW		|		BUS-Type		|	111000	|	------	|	PERBUSW R1,addr	|	peripheral[addr] <- R1 (rs)	(write to peripheral register)
	PERBUSR		|		BUS-Type		|	111001	|	------	|	PERBUSR	R1,addr	|	R1 <- periphreal[addr] (rd)	(read from peripheral register)
// ---------------------------------------- Instruction Set ---------------------------------------- \\