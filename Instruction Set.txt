R-Type Instruction

												Format:
 31				  26 25			  21 20			  16 15			  11 10				  6  5					0
-------------------------------------------------------------------------------------------------------------
|		CONST		|				|				|				|					|					|
|					|				|				|				|					|					|
|	OPCODE 6[Bits]	|	rs 5[Bits]	|	rt 5[Bits]	|	rd 5[Bits]	|	shamt 5[Bits]	|	Funct 6[Bits]	|
|					|				|				|				|					|					|
|		000000		|				|				|				|					|					|
-------------------------------------------------------------------------------------------------------------

OPCODE field always 000000[BIN] for R-Type Instruction.

The Fields rs and rt in the format get the register address for the register that the programmer want to read.

The Field rd in the format get the register address for the register that the programmer want to write.

IF the operation in the instruction is shift operation the "shamt"
field get the number of shifts that define in the instruction.
OTHERWISE this field get the value 00000[BIN]

The Func Field Represent the operation type that the programmer want to do in this instruction.



I - Type Instruction

								Format:
31				  26|25			  21|20			  16|15								0
-------------------------------------------------------------------------------------
|					|				|				|								|
|					|				|				|								|
|	OPCODE 6[Bits]	|	rs 5[Bits]	|	rt 5[Bits]	|	immediate/address 16[Bits]	|
|					|				|				|								|
|					|				|				|								|
-------------------------------------------------------------------------------------
													
													
J - Type Instruction								
													
								Format:				
													
-------------------------------------------------------------------------------------
|					|								|								|
|					|								|								|
|	OPCODE 6[Bits]	|				XXX				|		Address 16[Bits]		|
|					|								|								|
|					|								|								|
-------------------------------------------------------------------------------------


BUS - Type Instruction

								Format:
31				  26|25							  16|15								0
-------------------------------------------------------------------------------------
|		CONST		|								|								|
|					|								|								|
|	OPCODE 6[Bits]	|	Peripheral Address 10[Bits]	|			Data 16[Bits]		|
|					|								|								|
|		111000		|								|								|
-------------------------------------------------------------------------------------



// ---------------------------------------- Instruction Set ---------------------------------------- \\

	Operation	|	Instruction Type	|	OP-Code	|	Funct	|	Example			|	Example Description
	
	ADD			|		R-Type			|	000000	|	000100	|	ADD	R1,R2,R3	|	R1 <- R2 + R3			 - Sign
	SUB			|		R-Type			|	000000	|	000101	|	SUB R1,R2,R3	|	R1 <- R2 - R3			 - Sign
	MUL			|		R-Type			|	000000	|	000110	|	MUL R1,R2,R3	|	R1 <- R2 * R3 (Multiply) - Sign
	DIV			|		R-Type			|	000000	|	000111	|	DIV	R1,R2,R3	|	R1 <- R2 / R3 (Division) - Sign
	
	ADDU		|		R-Type			|	000000	|	010100	|	ADD	R1,R2,R3	|	R1 <- R2 + R3			 - Unsign
	SUBU		|		R-Type			|	000000	|	010101	|	SUB R1,R2,R3	|	R1 <- R2 - R3			 - Unsign
	MULU		|		R-Type			|	000000	|	010110	|	MUL R1,R2,R3	|	R1 <- R2 * R3 (Multiply) - Unsign
	DIVU		|		R-Type			|	000000	|	010111	|	DIV	R1,R2,R3	|	R1 <- R2 / R3 (Division) - Unsign
	
	AND			|		R-Type			|	000000	|	001000	|	AND R1,R2,R3	|	R1 <- R2 & R3
	OR			|		R-Type			|	000000	|	001001	|	OR	R1,R2,R3	|	R1 <- R2 | R3
	NOR			|		R-Type			|	000000	|	001010	|	NOR R1,R2,R3	|	R1 <- ~ (R2 | R3)
	XOR			|		R-Type			|	000000	|	001011	|	XOR R1,R2,R3	|	R1 <- R2 ^ R3
	
	SLL			|		R-Type			|	000000	|	011000	|	SLL	R1,R2,R3	|	R1 <- R2 << R3 (Shift Logic)
	SRL			|		R-Type			|	000000	|	011001	|	SRL R1,R2,R3	|	R1 <- R2 >> R3 (Shift Logic)
	SLA			|		R-Type			|	000000	|	011010	|	SLA	R1,R2,R3	|	R1 <- R2 << R3 (Shift Arith)
	SRA			|		R-Type			|	000000	|	011011	|	SRA R1,R2,R3	|	R1 <- R2 >> R3 (Shift Arith)
	
	ADDI		|		I-Type			|	000100	|	------	|	ADDI R1,R2,imm	|	R1 <- R2 + imm (16LSB) - Sign
	SUBI		|		I-Type			|	000101	|	------	|	SUBI R1,R2,imm	|	R1 <- R2 - imm (16LSB) - Sign
	MULI		|		I-Type			|	000110	|	------	|	MULI R1,R2,imm	|	R1 <- R2 * imm (16LSB) - Sign
	DIVI		|		I-Type			|	000111	|	------	|	DIVI R1,R2,imm	|	R1 <- R2 / imm (16LSB) - Sign
	
	ADDUI		|		I-Type			|	010100	|	------	|	ADDI R1,R2,imm	|	R1 <- R2 + imm (16LSB) - Unsign
	SUBUI		|		I-Type			|	010101	|	------	|	SUBI R1,R2,imm	|	R1 <- R2 - imm (16LSB) - Unsign
	MULUI		|		I-Type			|	010110	|	------	|	MULI R1,R2,imm	|	R1 <- R2 * imm (16LSB) - Unsign
	DIVUI		|		I-Type			|	010111	|	------	|	DIVI R1,R2,imm	|	R1 <- R2 / imm (16LSB) - Unsign
	
	ADDHI		|		I-Type			|	100100	|	------	|	ADDI R1,R2,imm	|	R1 <- R2 + imm (16MSB) - Sign
	SUBHI		|		I-Type			|	100101	|	------	|	SUBI R1,R2,imm	|	R1 <- R2 - imm (16MSB) - Sign
	MULHI		|		I-Type			|	100110	|	------	|	MULI R1,R2,imm	|	R1 <- R2 * imm (16MSB) - Sign
	DIVHI		|		I-Type			|	100111	|	------	|	DIVI R1,R2,imm	|	R1 <- R2 / imm (16MSB) - Sign
	
	ADDUHI		|		I-Type			|	110100	|	------	|	ADDI R1,R2,imm	|	R1 <- R2 + imm (16MSB) - Unsign
	SUBUHI		|		I-Type			|	110101	|	------	|	SUBI R1,R2,imm	|	R1 <- R2 - imm (16MSB) - Unsign
	MULUHI		|		I-Type			|	110110	|	------	|	MULI R1,R2,imm	|	R1 <- R2 * imm (16MSB) - Unsign
	DIVUHI		|		I-Type			|	110111	|	------	|	DIVI R1,R2,imm	|	R1 <- R2 / imm (16MSB) - Unsign
	
	ANDI		|		I-Type			|	001000	|	------	|	ANDI R1,R2,imm	|	R1 <- R2 & imm 	   (16LSB)
	ORI			|		I-Type			|	001001	|	------	|	ORI	 R1,R2,imm	|	R1 <- R2 | imm 	   (16LSB)
	NORI		|		I-Type			|	001010	|	------	|	NORI R1,R2,imm	|	R1 <- ~ (R2 | imm) (16LSB)
	XORI		|		I-Type			|	001011	|	------	|	XORI R1,R2,imm	|	R1 <- R2 ^ imm	   (16LSB)
	
	ANDHI		|		I-Type			|	101000	|	------	|	ANDI R1,R2,imm	|	R1 <- R2 & imm 	   (16MSB)
	ORHI		|		I-Type			|	101001	|	------	|	ORI	 R1,R2,imm	|	R1 <- R2 | imm 	   (16MSB)
	NORHI		|		I-Type			|	101010	|	------	|	NORI R1,R2,imm	|	R1 <- ~ (R2 | imm) (16MSB)
	XORHI		|		I-Type			|	101011	|	------	|	XORI R1,R2,imm	|	R1 <- R2 ^ imm	   (16MSB)
	
	BEQ			|		I-Type			|	001100	|	------	|	BEQ R1,R2,Label	|	branch to Label if (R1 == R2)
	BNE			|		I-Type			|	001101	|	------	|	BNE R1,R2,Label	|	branch to Label if (R1 != R2)
	BGT			|		I-Type			|	001110	|	------	|	BGT R1,R2,Label	|	branch to Label if (R1 > R2)
	BLE			|		I-Type			|	001111	|	------	|	BLE R1,R2,Label	|	branch to Label if (R1 < R2)
	
	LDW			|		I-Type			|	000001	|	------	|	LDW R1,off(R2)	|	Data_MEM[R2+off] <- R1 (Load Word)
	STW			|		I-Type			|	000010	|	------	|	STW R1,off(R2)	|	R1 <- Data_MEM[R2+off] (Store Word)
	
	ADDF		|		R-Type			|	000000	|	000000	|	ADDF R1,R2,R3	|	R1 <- R2 + R3 (IEEE-754 - float)
	SUBF		|		R-Type			|	000000	|	000001	|	SUBF R1,R2,R3	|	R1 <- R2 - R3 (IEEE-754 - float)
	MULF		|		R-Type			|	000000	|	000010	|	MULF R1,R2,R3	|	R1 <- R2 * R3 (IEEE-754 - float)
	DIVF		|		R-Type			|	000000	|	000011	|	DIVF R1,R2,R3	|	R1 <- R2 / R3 (IEEE-754 - float)
	
	JMP			|		J-Type			|	111111	|	------	|	JMP Label 		|	PC disconnected from the Adder
	CALL		|		J-Type			|	111110	|	------	|	CALL Label		|	PC <- ADDR of instruction MEM (sp,ra)
	RET			|		J-Type			|	111101	|	------	|	RET				|	PC <- STACK[sp], ra <- ra - 4
	
	PERBUSW		|		BUS-Type		|	111000	|	------	|	PERBUSW SFRx,imm|	BUSRegW <- concat(ADDR,DATA) En Write to Bus
	PERBUSR		|		BUS-Type		|	111001	|	------	|	PERBUSR SFRx,Rx	|	BUSRegW <- concat(ADDR,DATA) En Read from Bus
// ---------------------------------------- Instruction Set ---------------------------------------- \\


// --------------------------------------- Rules -------------------------------------------------- //

	-- / Indicate the Instruction Type: \ --
if 		(Op-Code 			 == "000000") => R-Type
elsif	(Op-Code(5 downto 2) == "1111") => J-Type
elsif	(Op-Code(5 downto 3) == "111") => BUS-Type
else => I-Type
	-- / Indicate the Instruction Type: \ --

	-- / ALU OpCode \ --
Basic Arith Signed Operation (ADD,SUB,MUL,DIV):    0001xx
Basic Arith UnSigned Operation (ADDU,SUBU,MULU,DIVU):  0101xx
Basic Logic Operation (AND, OR, NOR, XOR): 0010xx
Basic Shift Operation (SLL,SRL,SLA,SRA):	0110xx

now this operations below only for I-Type: {if instruction = I-Type check the MSB of the OP Code}
The MSB of the Op-Code in I-Type indicate if the imm value get into the MSB 16 Bits or the LSB Bits

The Bit after the MSB (MSB-1) indicate if the operation is Signed or Unsigned.
Same thing in the R-Type about this Bit (MSB-1), BUT if the bit (MSB-2) also '1' the operation in R-Type is shift.

if 		(Op-Code(5 dowtno 2) == "1001") => imm value shift to the 16 bits of the MSB							 /*OP-Code = "1001xx"*\
elsif	(Op-Code(5 downto 2) == "1101") => imm value shift to the 16 bits of the MSB and the op will be unsigned /*OP-Code = "1101xx"*\
elsif	(Op-Code(5 downto 2) == "1010") => imm 
	-- / ALU OpCode \ --

// --------------------------------------- Rules -------------------------------------------------- //


PERBUSW - the first parameter is address of SFR (*) the second parameter is immediate parameter.
PERBUSR - the first parameter is address of SFR (*) the second parameter is CPU Register that will get the data from the SFR.


(*)SFRx - address of the special function register
